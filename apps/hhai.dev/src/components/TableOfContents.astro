---
import type { Heading } from "@/layouts/BlogPostLayout.astro";
import HeadingElement from "./HeadingElement.astro";

type Props = {
  headings: Heading[];
};

// Shift the levels to base 1 by finding the smallest depth
const minDepth = Math.min(...Astro.props.headings.map((h) => h.depth));
Astro.props.headings.forEach((h) => (h.depth -= minDepth - 1));

const headings: Heading[] = Astro.props.headings;

export type NestedHeading = {
  text: string;
  slug: string;
  children: NestedHeading[];
};

// filter headings to only include level 1 and 2
const filteredHeadings = headings.filter((h) => h.depth <= 2);

// convert to nested structure
const nestedHeadings: NestedHeading[] = [];
for (const h of filteredHeadings) {
  if (h.depth === 1) {
    nestedHeadings.push({
      text: h.text,
      slug: h.slug,
      children: [],
    });
  } else if (h.depth === 2) {
    nestedHeadings[nestedHeadings.length - 1].children.push({
      text: h.text,
      slug: h.slug,
      children: [],
    });
  }
}
---

<div class="table-of-content">
  <h3>On this page</h3>
  <ol class="level-1">
    {
      nestedHeadings.map((heading) => (
        <li>
          <HeadingElement heading={heading} depth={2} />
        </li>
      ))
    }
  </ol>
</div>

<style lang="scss" is:global>
  .table-of-content {
    h3 {
      font-size: 18px;
      color: var(--text-body-heavy);
      font-weight: var(--font-weight-normal);
    }

    ol {
      margin: 0;
      padding-inline-start: 1.1em;
    }

    ul {
      padding-inline-start: 0;
      list-style-type: none;
    }

    & > li {
      // margin-top: 8px;
    }

    li::marker,
    a,
    a:visited {
      color: var(--text-body-light);
      font-size: 14px;
      line-height: 1.35em;
      letter-spacing: -0.02em;
      hyphens: auto;
      text-decoration: none;
    }

    li.active > a,
    a:hover {
      color: var(--text-body-heavy);
      box-shadow: inset 0 -2px 0 0 var(--text-body-heavy);
      animation: tocEntryMorphIn 0.3s ease-in-out forwards;

      @keyframes tocEntryMorphIn {
        from {
          box-shadow: inset 0px 0px 0 0 var(--text-body-heavy);
        }
        to {
          box-shadow: inset -2px 0 0 0 var(--text-body-heavy);
        }
      }
    }

    a {
      display: block;
    }
  }

  .level-1 > li > a {
    font-weight: var(--font-weight-medium);
    padding: 6px 8px 6px 4px;
  }

  .level-2 > li > a {
    font-weight: var(--font-weight-normal);
    padding: 4px 8px 4px 4px;
  }
</style>
