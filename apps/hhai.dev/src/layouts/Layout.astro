---
import "./global.scss";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Archivo:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <link href="https://cdn.jsdelivr.net/npm/@fontsource/cascadia-code@4.2.1/index.min.css" rel="stylesheet">
    {process.env.NODE_ENV === "production" &&
      <script>
        !(function (t, e) {
          var o, n, p, r;
          e.__SV ||
            ((window.posthog = e),
            (e._i = []),
            (e.init = function (i, s, a) {
              function g(t, e) {
                var o = e.split(".");
                2 == o.length && ((t = t[o[0]]), (e = o[1])),
                  (t[e] = function () {
                    t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
                  });
              }
              ((p = t.createElement("script")).type = "text/javascript"),
                (p.async = !0),
                (p.src = s.api_host + "/static/array.js"),
                (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(
                  p,
                  r
                );
              var u = e;
              for (
                void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
                  u.people = u.people || [],
                  u.toString = function (t) {
                    var e = "posthog";
                    return (
                      "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e
                    );
                  },
                  u.people.toString = function () {
                    return u.toString(1) + ".people (stub)";
                  },
                  o =
                    "capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys".split(
                      " "
                    ),
                  n = 0;
                n < o.length;
                n++
              )
                g(u, o[n]);
              e._i.push([i, s, a]);
            }),
            (e.__SV = 1));
        })(document, window.posthog || []);
        posthog.init("phc_DNnzWNmnjFtV0dwGSFedEhviKhj9dpXAjHw0OyspGvO", {
          api_host: "https://app.posthog.com",
        });
      </script>
    }
  </head>
  <body>
    <slot />
  </body>
</html>
<style is:global>
  html {
    font-family: Archivo, system-ui, sans-serif;
  }
  code {
    font-family:
      Cascadia Code,
      monospace;
  }
</style>
