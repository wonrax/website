---
import "./global.scss";
import "@fontsource-variable/inter";
import inter from "@fontsource-variable/inter/files/inter-latin-wght-normal.woff2?url";
import path from "path";
import "./global.scss";
import { SEO, type Props as SeoProps } from "astro-seo";

export type Props = {
  seoProps: SeoProps & {
    title: string;
    description: string;
  };
};

const seoProps = Astro.props.seoProps;

const ogImageUrl =
  Astro.url.protocol +
  "//" +
  Astro.url.host +
  path.posix.join(Astro.url.pathname, "og-image.png");

const title = seoProps.title;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="alternate icon" type="image/png" href="/favicon.png" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <SEO
      title={title}
      titleDefault={title}
      description={seoProps?.description}
      openGraph={{
        basic: {
          image: ogImageUrl,
          title: title,
          type: "object",
          ...seoProps?.openGraph?.basic,
        },
        optional: {
          siteName: "Hai L. Ha-Huy",
          description: seoProps?.description,
        },
        image: {
          url: ogImageUrl,
          alt: "Banner image for: " + title,
          width: 1200,
          height: 630,
        },
        article: {
          authors: ["Hai L. Ha-Huy"],
          ...seoProps?.openGraph?.article,
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@wnrax",
        description: seoProps?.description,
        image: ogImageUrl,
        imageAlt: "Banner image for: " + title,
        title: title,
        ...seoProps?.twitter,
      }}
    />
    <!-- Preload the font to avoid FOUT, note that you might have to add more if
you use more additional fonts, check which fonts are being used in Chrome devtools -->
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={inter}
      crossorigin="anonymous"
    />

    <slot name="head" />
  </head>
  <body>
    <slot />
    <script>
      if (process.env.NODE_ENV === "production") {
        const [{ posthog }, { checkAuthUser }] = await Promise.all([
          import("posthog-js"),
          import("@/state"),
        ]);

        posthog.init("phc_DNnzWNmnjFtV0dwGSFedEhviKhj9dpXAjHw0OyspGvO", {
          api_host: "https://app.posthog.com",
          loaded: async (posthog) => {
            if (sessionStorage.getItem("posthog_identified") === "true") {
              return;
            }
            try {
              const authInfo = await checkAuthUser();
              if (authInfo != null)
                posthog.identify(authInfo.id.toString(), {
                  email: authInfo.email,
                  name: authInfo.name,
                });
              sessionStorage.setItem("posthog_identified", "true");
            } catch (e) {
              console.error("Could not identify user", e);
            }
          },
        });
      }
    </script>
  </body>
</html>
