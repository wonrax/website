---
import TableOfContents from "../components/TableOfContents.astro";
import BlogRouteLayout from "./BlogRouteLayout.astro";

export type Frontmatter = {
  title: string;
  description: string;
  published: string;
  updated: string;
  tags: string[];
  isDraft?: boolean;
  hidden?: boolean;
  ogImageUrl?: string;
};

export type Heading = {
  text: string;
  slug: string;
  depth: number;
};

type Props = {
  frontmatter: Frontmatter;
  headings: Heading[];
};

const post = Astro.props.frontmatter;
const headings = Astro.props.headings;
---

<BlogRouteLayout>
  <title slot="head">{post.title}</title>
  <meta slot="head" name="description" content={post.description} />
  {
    post.ogImageUrl ? (
      <meta slot="head" property="og:image" content={post.ogImageUrl} />
    ) : null
  }
  <link slot="head" rel="preconnect" href="https://cdn.jsdelivr.net" />
  <link
    slot="head"
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.css"
    integrity="sha384-OH8qNTHoMMVNVcKdKewlipV4SErXqccxxlg6HC9Cwjr5oZu2AdBej1TndeCirael"
    crossorigin="anonymous"
  />
  <link
    slot="head"
    href="https://cdn.jsdelivr.net/npm/@fontsource/cascadia-code@4.2.1/index.min.css"
    rel="stylesheet"
  />
  <main class="blog-post-main">
    <div class="right-sidebar">
      <div class="right-sidebar-content">
        {
          headings.length ? (
            <>
              <h3>On this page</h3>
              <TableOfContents headings={headings} />
              <button id="go-to-top">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="21"
                  height="21"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-chevron-up"
                >
                  <path d="m18 15-6-6-6 6" />
                </svg>
                Go to top
              </button>
            </>
          ) : null
        }
        <!-- <div class="mt-6">
          <ScrollToTopButton />
        </div> -->
      </div>
    </div>
    <article class="article">
      <div class="post-header">
        <h1>
          {post.title}
        </h1>
        <div class="separator">
          <span class="article-date">
            {
              new Date(post.published).toLocaleDateString("en-UK", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })
            }
          </span>
          <span class="separator-line"></span>
          {
            post.tags &&
              post.tags.map((tag) => <span class="post-tag">#{tag}</span>)
          }
        </div>
      </div>
      <div class="article-body">
        {
          post.isDraft ? (
            <div class="feature-aside">
              <aside class="callout callout-warning">
                <div class="callout-title">Draft</div>
                <div class="callout-content">
                  <p>
                    This post is a draft and is not yet ready for public
                    viewing.
                  </p>
                </div>
              </aside>
            </div>
          ) : null
        }
        <slot />
      </div>
    </article>
  </main>
</BlogRouteLayout>

<style lang="scss" is:global>
  .blog-post-main {
    display: flex;
    flex-direction: row;
    gap: 64px;
    max-width: 100%;
    justify-content: center;
  }

  .right-sidebar {
    display: none;

    @media (min-width: 1280px) {
      display: block;
      order: 2;
      align-self: stretch;
    }

    .right-sidebar-content {
      position: sticky;
      top: 24px;
      overflow-y: auto;
      max-height: 90vh;

      h3 {
        font-size: 18px;
        font-weight: var(--font-weight-medium);
        color: #333;
      }

      @media (min-width: 1280px) {
        width: 240px;
      }
    }
  }

  .article {
    font-size: 17px;
    width: 100%;

    @media (min-width: 1280px) {
      max-width: 800px;
    }

    .post-tag {
      display: inline-block;
      // padding: 4px 8px;
      border-radius: 6px;
      margin-left: 8px;
      // background-color: #f4f4f4;
      font-size: 14px;
      font-weight: var(--font-weight-medium);
      color: #666;
      // margin: 0 4px 4px 0;
    }

    .article-date {
      font-size: 14px;
      font-weight: var(--font-weight-medium);
      color: #666;
      white-space: nowrap;
      margin-right: 8px;
    }

    figure {
      margin: 32px 0;
    }
  }

  .article .post-header {
    max-width: 700px;
    margin: 0 auto;
    box-sizing: border-box;

    h1 {
      font-size: 40px;
      font-weight: 400;
      font-style: italic;
      margin: 16px 0;
      color: #333;
      letter-spacing: -0.01em;
      font-family: Libre Baskerville;
    }

    .separator {
      display: flex;
      flex-direction: row;
      align-items: center;
      margin-top: 16px;

      .separator-line {
        height: 1px;
        background-color: #555;
        width: 12px;
        display: inline-block;
      }
    }

    @media (max-width: 800px) {
      padding: 0 32px;
    }
  }

  .article .article-body {
    li {
      color: #444;
      margin: 8px 0;
      line-height: 1.65em;
      letter-spacing: -0.02em;

      p {
        margin: 0;
      }
    }
  }

  .article .article-body {
    // padding-left: 16px;
    // padding-right: 16px;
    padding-bottom: 128px;
    // display: flex;
    // flex-direction: column;
    // align-items: center;
    word-wrap: break-word;
    margin-top: 32px;

    & > * {
      margin-left: auto;
      margin-right: auto;
    }

    @media (min-width: 1024px) {
      padding-left: 0;
      padding-right: 0;
    }

    .reading-line-width {
      max-width: 100%;
      width: 700px;
      box-sizing: border-box;

      @media (max-width: 800px) {
        padding: 0 32px;
      }
    }

    .feature {
      img {
        width: 100%;
      }
    }

    /* <!-- TODO move to using tailwind or smth, add toggle for line numbers --> */
    .feature-sm {
      width: 100%;
      max-width: 800px;
      box-sizing: border-box;

      @media (max-width: 1280px) {
        padding: 0 16px;
      }
    }

    .image-caption {
      margin: 12px;
      font-weight: var(--font-weight-medium);
      color: #666;
      font-size: 14px;

      code {
        font-size: 13px;
      }
    }

    .icon.icon-link {
      opacity: 0;
    }

    h1:hover .icon.icon-link,
    h2:hover .icon.icon-link,
    h3:hover .icon.icon-link,
    h4:hover .icon.icon-link,
    h5:hover .icon.icon-link,
    h6:hover .icon.icon-link {
      opacity: 1;
    }

    h1[id],
    h2[id],
    h3[id],
    h4[id],
    h5[id],
    h6[id] {
      scroll-margin-top: 24px;
    }

    .icon.icon-link::after {
      content: "#";
      margin-left: 4px;
    }

    .feature-lg {
      z-index: 10;
      position: relative;
      max-width: 1104px;
      width: 1104px;
      box-sizing: border-box;

      @media (max-width: 1280px) {
        padding: 0 8px;
        max-width: 100%;
      }
    }

    .feature-code {
      width: 100%;
      max-width: 800px;
      box-sizing: border-box;
      margin: 32px auto;

      @media (max-width: 1280px) {
        padding: 0 16px;
      }
    }

    .feature-table {
      width: fit-content;
      max-width: 100%;
      margin: 32px auto;
      border-radius: 12px;
      overflow-y: auto;
    }

    table {
      font-size: 15px;
      border-collapse: collapse;
      border-spacing: 0;

      tbody {
        color: #555;
      }

      td {
        white-space: break-spaces;
        overflow-wrap: break-word;
        padding: 8px 16px;
        border-top: 1px solid #eee;
      }

      th {
        padding: 8px 16px;
        font-weight: var(--font-weight-medium);
      }
    }

    p {
      margin: 16px 0;
      line-height: 1.65em;
      color: #444;
      letter-spacing: -0.02em;
      font-weight: var(--font-weight-normal);
    }

    ul {
      color: #333;
    }

    h1 {
      font-family: Libre Baskerville;
      font-size: 32px;
      font-weight: var(--font-weight-medium);
      margin: 32px 0 16px 0;
      line-height: 1.35em;
      letter-spacing: -0.02em;
    }

    h2 {
      font-family: Libre Baskerville;
      font-size: 28px;
      font-weight: 400;
      margin: 48px 0 24px 0;
      line-height: 1.35em;
      letter-spacing: -0.02em;
    }

    h3 {
      font-size: 20px;
      font-weight: var(--font-weight-medium);
      margin: 32px 0 16px 0;
      line-height: 1.35em;
      letter-spacing: -0.02em;
    }

    a,
    a:visited {
      color: black;
      text-decoration: underline;
    }

    .feature-aside {
      margin: 32px auto;

      @media (max-width: 1280px) {
        padding: 0 16px;
      }

      aside {
        background-color: #f5f5f5;
        padding: 24px;
        border-radius: 12px;
        width: 100%;
        max-width: 748px;
        box-sizing: border-box;
        margin: 0 auto;

        p {
          font-size: 16px;
          color: #707070;
          margin-top: 16px;
          margin-bottom: 0;

          &:nth-child(1) {
            margin-top: 0;
          }
        }

        code {
          font-size: 14px;
        }
      }
    }

    aside.callout {
      .callout-title {
        font-size: 13px;
        font-weight: var(--font-weight-medium);
        text-transform: uppercase;
      }

      .callout-content {
        margin-top: 8px;
      }

      p {
        font-size: 16px;
      }
    }

    .callout.callout-note {
      background-color: #fbf7ff;

      .callout-title {
        color: #7b5fbb;
      }

      p {
        color: #220e5a;
      }
    }

    .callout.callout-warning {
      background-color: #fff9ec;

      .callout-title {
        color: #b69245;
      }

      p {
        color: #794e0f;
      }
    }

    img {
      display: block;
      height: auto;
      border-radius: 12px;
      margin: 0 auto;
    }
  }

  // Code block stylying
  .article .article-body div[data-rehype-pretty-code-fragment] {
    margin-top: 24px;
    border-radius: 12px;
    background-color: #f8f8f8;

    pre {
      overflow-x: auto;
      line-height: 1.4em;
      margin: 0;
      padding: 16px 0;
    }

    code {
      display: grid;
      counter-reset: line;
      margin: 0;
      padding: 0;
      background-color: transparent;
      width: 100%;

      & > .code-block-line {
        /* make up for the highlighted leftmost border width */
        border-left: solid 2px transparent;

        padding-top: 0;
        padding-right: 8px;
        padding-bottom: 0;
        padding-left: 0;

        [data-highlighted-chars] {
          background-color: rgba($color: #000000, $alpha: 0.05);
          padding: 2px 4px;
          margin: 0 -4px;
          border-radius: 6px;
        }
      }

      & > .code-block-line.highlighted {
        background-color: rgba($color: #000000, $alpha: 0.05);
        border-left: solid 2px #686868;
      }

      &[data-line-numbers-max-digits="2"] > .code-block-line::before {
        width: 2rem;
      }

      &[data-line-numbers-max-digits="3"] > .code-block-line::before {
        width: 3rem;
      }

      &[data-line-numbers] > .code-block-line::before {
        counter-increment: line;
        content: counter(line);

        display: inline-block;
        width: 1rem;
        margin-left: 16px;
        margin-right: 24px;
        color: #ccc;
        text-align: right;
      }

      &:not([data-line-numbers]) > .code-block-line {
        padding-left: 16px;
      }
    }

    .code-block-title {
      display: flex;
      flex-direction: column;
      justify-content: center;
      background-color: #e7e7e7;
      padding: 0 16px;
      height: 32px;
      width: fit-content;
      color: #333;
      font-size: 14px;
      font-weight: var(--font-weight-medium);
      margin-left: 16px;
      border-radius: 0 0 8px 8px;
    }
  }

  .article .article-body .code-group {
    .code-group-tabs {
      display: flex;
      padding-left: 16px;
      padding-right: 16px;
      overflow-y: auto;

      .code-block-title {
        margin-left: 2px;
        cursor: pointer;

        &.active {
          background-color: #333;
          color: white;
        }

        &:not(.active):hover {
          background-color: #ccc;
        }
      }
    }
  }

  code {
    font-size: 15px;
  }

  .article .article-body span[data-rehype-pretty-code-fragment],
  :not(span[data-rehype-pretty-code-fragment]) > code {
    padding: 2px 4px;
    background-color: rgba($color: #000000, $alpha: 0.05);
    border-radius: 4px;
  }

  .katex-display {
    overflow-y: auto;
  }

  #go-to-top {
    background-color: #eee;
    color: #333;
    border-radius: 8px;
    font-size: 14px;
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    border: none;
    outline: none;
    padding: 4px 10px 4px 8px;
    margin-top: 24px;
    font-family: Inter; // TODO move this to global selector
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 4px;

    &:hover {
      background-color: #ddd;
    }
  }
</style>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      let currentId: string | null = null;
      for (const entry of entries) {
        const id = entry.target.getAttribute("id");
        if (entry.isIntersecting) {
          document
            .querySelector(`.right-sidebar .table-of-content a[href="#${id}"]`)
            ?.parentElement?.classList.add("active");
          currentId = id;
          break;
        }
      }
      if (currentId)
        document
          .querySelectorAll(".right-sidebar .table-of-content .active a")
          .forEach((entry) => {
            const id = entry.getAttribute("href");
            if (id !== "#" + currentId) {
              entry.parentElement?.classList.remove("active");
            }
          });
    },
    {
      rootMargin: "0px 0px -70% 0px",
      threshold: 1,
    }
  );

  // Track all sections that have an `id` applied
  document.querySelectorAll("h1[id],h2[id],h3[id]").forEach((section) => {
    observer.observe(section);
  });

  document.querySelector("#go-to-top")?.addEventListener("click", () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  });
</script>
