---
import BlogRouteLayout from "../layouts/BlogRouteLayout.astro";
import GreatReadsFeed from "../components/GreatReadsFeedSolid.tsx";
import "./great-reads/GreatReadsFeed.module.scss";
import { JSDOM } from "jsdom";
import type { RSSItem } from "@/shared/parseRssFeed";
import type { HighlightItem } from "@/shared/parseHighlights";
import ToasterProvider from "@/components/ToasterProvider";

export function parseFeedServer(xml: string): RSSItem[] {
  const doc = new JSDOM(xml, {
    contentType: "text/xml",
  }).window.document;

  const items = Array.from(doc.querySelectorAll("item"));
  return items.map((item) => ({
    title: item.querySelector("title")?.textContent ?? undefined,
    link: item.querySelector("link")?.textContent ?? undefined,
    pubDate: item.querySelector("pubDate")?.textContent ?? undefined,
  }));
}

// Always fetch RSS feed server-side for initial page load
let highlights: HighlightItem[] = [];
let fallbackItems: RSSItem[] = [];

try {
  // Always fetch RSS feed for initial page load
  const FEED_URL = "https://bg.raindrop.io/rss/public/55948413";
  const rssRes = await fetch(FEED_URL);
  const xml = await rssRes.text();
  fallbackItems = parseFeedServer(xml);
} catch (error) {
  console.error("Failed to fetch RSS feed:", error);
  fallbackItems = [];
}
---

<BlogRouteLayout
  seoProps={{
    title: "Great Reads",
    description: "A collection of great reads curated by me.",
  }}
>
  <ToasterProvider client:only="solid-js" />
  <main class="blog-main">
    <GreatReadsFeed
      initialItems={fallbackItems}
      initialHighlights={highlights}
      client:idle
    />
  </main>
</BlogRouteLayout>
