---
import "./global.scss";
import "@fontsource-variable/inter";
import inter from "@fontsource-variable/inter/files/inter-latin-wght-normal.woff2?url";
import path from "path";
import "./global.scss";
import { SEO, type Props as SeoProps } from "astro-seo";
import childProcess from "child_process";
import { version } from "../../package.json";
import GlobalBanner from "@/components/GlobalBanner";

export type Props = {
  seoProps: SeoProps & {
    title: string;
    description: string;
  };
};

const seoProps = Astro.props.seoProps;

const ogImageUrl =
  Astro.url.protocol +
  "//" +
  Astro.url.host +
  path.posix.join(Astro.url.pathname, "og-image.png");

const title = seoProps.title;

let commitHash: string | null = null;

try {
  commitHash = childProcess
    .execSync("git rev-parse --short HEAD")
    .toString()
    .trim();
} catch {
  commitHash = import.meta.env.PUBLIC_GIT_REV || null;
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="alternate icon" type="image/png" href="/favicon.png" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <SEO
      title={title}
      titleDefault={title}
      description={seoProps?.description}
      openGraph={{
        basic: {
          image: ogImageUrl,
          title: title,
          type: "object",
          ...seoProps?.openGraph?.basic,
        },
        optional: {
          siteName: "wonrax",
          description: seoProps?.description,
        },
        image: {
          url: ogImageUrl,
          alt: "Banner image for: " + title,
          width: 1200,
          height: 630,
        },
        article: {
          authors: ["wonrax"],
          ...seoProps?.openGraph?.article,
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@wnrax",
        description: seoProps?.description,
        image: ogImageUrl,
        imageAlt: "Banner image for: " + title,
        title: title,
        ...seoProps?.twitter,
      }}
    />
    <!-- Preload the font to avoid FOUT, note that you might have to add more if
you use more additional fonts, check which fonts are being used in Chrome devtools -->
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={inter}
      crossorigin="anonymous"
    />

    <slot name="head" />
  </head>
  <body>
    <slot />
    <script>
      import type { BannerPayload } from "@/components/GlobalBanner/GlobalBanner";

      if (import.meta.env.PROD) {
        const [{ posthog }, { checkAuthUser }] = await Promise.all([
          import("posthog-js"),
          import("@/state"),
        ]);

        posthog.init("phc_DNnzWNmnjFtV0dwGSFedEhviKhj9dpXAjHw0OyspGvO", {
          api_host: "https://i.wrx.sh",
          ui_host: "https://us.posthog.com",
          person_profiles: "always",
          loaded: async (posthog) => {
            if (sessionStorage.getItem("posthog_identified") === "true") {
              return;
            }
            try {
              const authInfo = await checkAuthUser();
              if (authInfo != null)
                posthog.identify(authInfo.id.toString(), {
                  email: authInfo.email,
                  name: authInfo.name,
                });
              sessionStorage.setItem("posthog_identified", "true");
            } catch (e) {
              console.error("Could not identify user", e);
            }

            // Check for global banner feature flag
            const flagKey = "global-banner";
            if (posthog.isFeatureEnabled(flagKey)) {
              const payload = posthog.getFeatureFlagPayload(
                flagKey
              ) as unknown as BannerPayload;
              if (payload && payload.content && payload.type) {
                // Store banner data on window for component to access
                window.__bannerData = payload;
                // Also dispatch event in case component is already loaded
                window.dispatchEvent(
                  new CustomEvent("banner-data", {
                    detail: payload,
                  })
                );
              }
            }
          },
        });
      }
    </script>
    <footer>
      <div class="footer-content">
        <a href="/" class="logo-name-text">wonrax</a>
        <a href="/blog" class="footer-link-item">Blog</a>
        <a href="/great-reads" class="footer-link-item">Bookmarks</a>
      </div>
      <span>
        Commit: {commitHash} - Version: {version}
      </span>
    </footer>
    <GlobalBanner client:load />
  </body>
</html>

<style lang="scss" is:global>
  footer {
    padding: 48px 0;
    gap: 8px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    .footer-content {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 16px;

      .logo-name-text {
        font-weight: var(--font-weight-medium);
      }
    }

    span {
      font-size: 13px;
      color: var(--text-body-light);
    }
  }
</style>
