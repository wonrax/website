---
import BlogRouteLayout from "@/layouts/BlogRouteLayout.astro";
import type { Frontmatter } from "@/layouts/BlogPostLayout.astro";
import "@/layouts/layout.scss";
import type { GetStaticPathsResult, MarkdownInstance } from "astro";

const allPosts = Object.values(
  import.meta.glob<MarkdownInstance<Frontmatter>>("../**/*.mdx", {
    eager: true,
  })
);

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const allPosts = import.meta.glob<MarkdownInstance<Frontmatter>>(
    "../**/*.mdx",
    {
      eager: true,
    }
  );
  const tag = new Set<string>();
  for (const post of Object.values(allPosts)) {
    if (post.frontmatter.tags) {
      for (const t of post.frontmatter.tags) {
        tag.add(t);
      }
    }
  }

  return tag
    .values()
    .map((t) => {
      return {
        params: {
          slug: t,
        },
      };
    })
    .toArray();
}

const { slug } = Astro.params;
---

<BlogRouteLayout
  seoProps={{
    title: `Blog with tag ${slug}`,
    description: "wrx.sh blog index with tag ${slug}",
  }}
>
  <main class="blog-main">
    <p
      style={{
        color: "var(--text-body-light)",
      }}
    >
      Viewing posts tagged with <strong>{slug}</strong>
    </p>
    <ul class="article-list">
      {
        allPosts
          .filter((post) => {
            return (
              slug &&
              post.frontmatter.tags.includes(String(slug)) &&
              (process.env.NODE_ENV !== "production" ||
                (!post.frontmatter.isDraft && !post.frontmatter.hidden))
            );
          })
          .sort((a, b) => {
            return (
              new Date(b.frontmatter.published).getTime() -
              new Date(a.frontmatter.published).getTime()
            );
          })
          .map((post) => {
            return (
              <li
                class={`article-entry${
                  post.frontmatter.isDraft === true ||
                  post.frontmatter.hidden === true
                    ? " hidden"
                    : ""
                }`}
              >
                <div>
                  <div
                    style={{
                      display: "flex",
                      "flex-direction": "row",
                      "align-items": "center",
                      gap: "12px",
                    }}
                  >
                    <a href={post.url}>{post.frontmatter.title}</a>
                    <hr
                      style={{
                        height: "1px",
                        flex: 1,
                        "background-color": "var(--bg-additive-medium)",
                        border: "none",
                        margin: "0",
                      }}
                    />
                    <p class="article-date">
                      {new Date(post.frontmatter.published).toLocaleDateString(
                        "en-UK",
                        {
                          year: "numeric",
                          month: "long",
                          day: "numeric",
                        }
                      )}
                    </p>
                  </div>
                </div>
                <p class="article-description">
                  {post.frontmatter.description}
                </p>
              </li>
            );
          })
      }
    </ul>
    <p
      style={{
        display: "flex",
        "flex-direction": "row",
        gap: "4px",
      }}
    >
      Tags:
      {
        Array.from(
          new Set(
            allPosts
              .map((post) => post.frontmatter.tags)
              .flat()
              .filter((tag) => tag)
          )
        ).map((tag) => {
          return <a href={`/blog/tag/${tag}`}>{tag}</a>;
        })
      }
    </p>
  </main>
</BlogRouteLayout>

<style lang="scss" is:global>
  .blog-main {
    .article-list {
      list-style-type: decimal;
      padding-inline-start: 0;

      .article-entry {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
        max-width: 700px;

        &.hidden {
          a {
            color: var(--text-body-light);
          }
        }

        & > div {
          width: 100%;
        }

        a {
          font-weight: var(--font-weight-medium);
          font-size: 16px;
          letter-spacing: -0.01em;
          line-height: 1.45em;
        }

        p {
          margin: 2px 0;
        }

        .article-date {
          color: var(--text-body-light);
          font-size: 14px;
          white-space: nowrap;
          // TODO relayout to display all instead of doing this
          flex-shrink: 0;
        }

        .article-description {
          color: var(--text-body-medium);
          font-size: 16px;
          line-height: 1.45em;
        }
      }
    }
  }
</style>
